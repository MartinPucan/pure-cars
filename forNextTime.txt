<?php
declare(strict_types=1);

class BaseRepository
{
    public string $tableName;
    public PDO $pdo;

    public function __construct()
    {
        [
            'host' => $host,
            'database' => $database,
            'user' => $user,
            'password' => $password] = $this->getConfig();

        $this->pdo = new PDO("mysql:host={$host};dbname={$database}", $user, $password);
    }

    public function findOne(int $id): ?array
    {
        return $this->findAll(['where' => ['id' => $id]])[0] ?? null;
    }

    public function findAll(array $options = []): array
    {
        $orderBy = $options['orderBy'] ?? [];
        $whereClauses = $options['where'] ?? [];

        $orderByClause = count($orderBy) === 0 ? '' : " order by {$orderBy['column']} {$orderBy['sortType']} ";

        $sql = <<<SQL
        SELECT * FROM {$this->tableName} {$this->getWhereClause($whereClauses)} {$orderByClause} 
        LIMIT 3 
        SQL;
        $query = $this->pdo->prepare($sql);

        foreach ($whereClauses as $column => $value) {
            $query->bindParam($column, $value);
        }
        var_dump($query);die;

        $query->execute();

        return $query->fetchAll(PDO::FETCH_ASSOC);
    }

    private function getWhereClause(array $whereClauses): string
    {
        if (count($whereClauses) === 0) {
            return '';
        }

        $whereClause = ' where ';

        foreach (array_keys($whereClauses) as $column) {
            $whereClause .= "{$column}=:{$column}";
        }

        return $whereClause;
    }

    private function getConfig(): array
    {
        $config = file_get_contents(__DIR__ . '/config.json');

        if (!$config) {
            echo 'Config not found!';die;
        }

        return json_decode($config, true) ?? [];
    }
}



<?php
declare(strict_types=1);

require __DIR__ . '/../../database/BaseRepository.php';

class CarRepository extends BaseRepository
{
    public string $tableName = 'car';

    public function findAllByMaxPrice(): array
    {
        return $this->findAll([
            'orderBy' => [
                'column' => 'price',
                'sortType' => 'DESC'
            ],
            'where' => ['id' => 1]
        ]);
    }

    public function createCar()
    {
        $query = $this->pdo->prepare('INSERT INTO car ');
        $query->execute();

        return $query->fetchAll(PDO::FETCH_ASSOC);
    }

    public function deleteCar($id)
    {
        $query = $this->pdo->prepare('DELETE FROM products WHERE product_id={$id};');
        $query->execute();

        return $query->fetchAll(PDO::FETCH_ASSOC);
    }

}
